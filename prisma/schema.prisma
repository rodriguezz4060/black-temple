generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email    String   @unique
    password String
    role     UserRole @default(USER)

    provider   String?
    providerId String?

    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt
}

model ClassSelection {
    id         Int    @id @default(autoincrement())
    name       String @unique
    classIcon  String
    classColor String

    specializations ClassSpecialization[]
    guides          Guide[]
}

model ClassSpecialization {
    id                  Int    @id @default(autoincrement())
    name                String
    specIcon            String
    specBackground      String
    difficultyBarBanner String
    gearBanner          String

    class   ClassSelection @relation(fields: [classId], references: [id])
    classId Int
    guides  Guide[]

    specRole   SpecRole @relation(fields: [specRoleId], references: [id])
    specRoleId Int
}

model SpecRole {
    id       Int    @id @default(autoincrement())
    name     String @unique
    roleIcon String

    specialization ClassSpecialization[]
}

model Mode {
    id           Int    @id @default(autoincrement())
    name         String @unique
    activityBg   String
    activityIcon String

    guides Guide[]
}

model Guide {
    id    Int    @id @default(autoincrement())
    patch String

    modeRelation Mode @relation(fields: [modeId], references: [id])
    modeId       Int

    class   ClassSelection @relation(fields: [classId], references: [id])
    classId Int

    specialization   ClassSpecialization @relation(fields: [specializationId], references: [id])
    specializationId Int

    overviewGears OverviewGear[]

    overviewDifficulty OverviewDifficulty?
    heroTalents        HeroTalents?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model OverviewDifficulty {
    id Int @id @default(autoincrement())

    singleTarget  Int?
    multiTarget   Int?
    utility       Int?
    survivability Int?
    mobility      Int?

    guide   Guide @relation(fields: [guideId], references: [id])
    guideId Int   @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model HeroTalents {
    id Int @id @default(autoincrement())

    guide   Guide @relation(fields: [guideId], references: [id])
    guideId Int   @unique

    tabs Tab[] // Один HeroTalents имеет много Tab

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tab {
    id Int @id @default(autoincrement())

    value   String // Уникальный идентификатор таба (например "tab1")
    label   String // Название таба (отображаемый текст)
    iconUrl String? // URL иконки (может быть null)
    content String // Markdown-контент

    // Связь с HeroTalents
    heroTalents   HeroTalents @relation(fields: [heroTalentsId], references: [id])
    heroTalentsId Int // Внешний ключ

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([value, heroTalentsId], name: "value_heroTalentsId")
    @@index([value])
}

model OverviewGear {
    id Int @id @default(autoincrement())

    itemSlot        String?
    itemName        String?
    itemImg         String?
    itemLink        String?
    itemEnchantName String?
    itemEnchantImg  String?
    itemEnchantUrl  String?

    itemSockets Socket[]

    guide   Guide @relation(fields: [guideId], references: [id])
    guideId Int // Связь с Guide

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([guideId])
}

model Socket {
    id Int @id @default(autoincrement())

    socketName String?
    socketImg  String?
    socketUrl  String?

    slotType SlotType? // Тип слота для сокета (опционально)

    overviewGear   OverviewGear @relation(fields: [overviewGearId], references: [id])
    overviewGearId Int // Связь с OverviewGear

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([overviewGearId])
}

enum UserRole {
    USER
    ADMIN
}

enum SlotType {
    HEAD
    NECK
    SHOULDER
    BACK
    CHEST
    SHIRT
    TABARD
    WRIST
    HAND
    BELT
    LEGS
    FEET
    FINGER
    SECOND_FINGER
    TRINKET
    SECOND_TRINKET
    MAIN_HAND
    OFF_HAND
}
