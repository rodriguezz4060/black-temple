generator client {
    provider = "prisma-client-js"
    output   = "../node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

model Expansion {
    id           Int      @id @default(autoincrement())
    name         String
    patchVersion String   @unique
    patchName    String
    guides       Guide[]  @relation("ExpansionGuides")
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model User {
    id            Int      @id @default(autoincrement())
    fullName      String   @unique
    email         String   @unique
    password      String
    avatar        String?
    bio           String?
    website       String?
    discord       String?
    discordServer String?
    battleTag     String?
    twitter       String?
    youtube       String?
    twitch        String?
    patreon       String?
    boosty        String?
    telegram      String?
    guides        Guide[]
    role          UserRole @default(USER)
    provider      String?
    providerId    String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model ClassSelection {
    id              Int                   @id @default(autoincrement())
    name            String                @unique
    classIcon       String
    classColor      String
    specializations ClassSpecialization[]
    guides          Guide[]
}

model ClassSpecialization {
    id                  Int            @id @default(autoincrement())
    name                String
    specIcon            String
    specBackground      String
    difficultyBarBanner String
    gearBanner          String
    talentsBG           String
    class               ClassSelection @relation(fields: [classId], references: [id])
    classId             Int
    guides              Guide[]
    specRole            SpecRole       @relation(fields: [specRoleId], references: [id])
    specRoleId          Int
}

model SpecRole {
    id             Int                   @id @default(autoincrement())
    name           String                @unique
    roleIcon       String
    specialization ClassSpecialization[]
}

model Mode {
    id           Int     @id @default(autoincrement())
    name         String  @unique
    activityBg   String
    activityIcon String
    guides       Guide[]
}

model Guide {
    id                 Int                 @id @default(autoincrement())
    title              String?
    slug               String              @unique
    expansionId        Int
    expansion          Expansion           @relation("ExpansionGuides", fields: [expansionId], references: [id])
    modeRelation       Mode                @relation(fields: [modeId], references: [id])
    modeId             Int
    class              ClassSelection      @relation(fields: [classId], references: [id])
    classId            Int
    specialization     ClassSpecialization @relation(fields: [specializationId], references: [id])
    specializationId   Int
    overviewGears      OverviewGear[]
    overviewDifficulty OverviewDifficulty?
    sections           Section[]           @relation("GuideSections")
    user               User                @relation(fields: [userId], references: [id])
    userId             Int
    isCommunity        Boolean             @default(false) // Флаг для Community Guides
    status             GuideStatus         @default(DRAFT) // Статус гайда
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
}

model Section {
    id          Int         @id @default(autoincrement())
    guideId     Int
    guide       Guide       @relation("GuideSections", fields: [guideId], references: [id])
    order       Int
    type        SectionType
    contentType String
    tabGroups   TabGroup[]  @relation("SectionTabGroups")
    textFields  TextField[] @relation("SectionTextFields")
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    @@index([guideId, order])
}

model Rotation {
    id           Int           @id @default(autoincrement())
    order        Int
    abilities    Ability[]     @relation("RotationAbilities")
    verticalRows VerticalRow[] @relation("RotationVerticalRows")
    tab          Tab?          @relation("TabRotation")
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
}

model Ability {
    id            String       @id @default(uuid()) // Используем строковый ID, как в компоненте
    rotationId    Int
    rotation      Rotation     @relation("RotationAbilities", fields: [rotationId], references: [id], onDelete: Cascade)
    url           String
    isPrepull     Boolean      @default(false)
    order         Int // Для сортировки в горизонтальной зоне
    verticalRowId Int? // Связь с вертикальным рядом (если способность в ряду)
    verticalRow   VerticalRow? @relation("VerticalRowAbilities", fields: [verticalRowId], references: [id], onDelete: SetNull)
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt

    @@index([rotationId])
    @@index([verticalRowId])
}

model VerticalRow {
    id            Int       @id @default(autoincrement())
    rotationId    Int
    rotation      Rotation  @relation("RotationVerticalRows", fields: [rotationId], references: [id], onDelete: Cascade)
    positionAfter String? // ID способности, после которой находится ряд
    abilities     Ability[] @relation("VerticalRowAbilities")
    order         Int // Для сортировки вертикальных рядов
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    @@index([rotationId])
}

model TabGroup {
    id        Int      @id @default(autoincrement())
    section   Section  @relation("SectionTabGroups", fields: [sectionId], references: [id], onDelete: Cascade)
    sectionId Int
    order     Int
    tabs      Tab[]    @relation("TabGroupTabs")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([sectionId])
}

model Tab {
    id           Int       @id @default(autoincrement())
    value        String
    label        String
    iconUrl      String?
    content      String
    importString String
    tabGroup     TabGroup  @relation("TabGroupTabs", fields: [tabGroupId], references: [id], onDelete: Cascade)
    tabGroupId   Int
    rotation     Rotation? @relation("TabRotation", fields: [rotationId], references: [id], onDelete: Cascade)
    rotationId   Int?      @unique
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    @@unique([value, tabGroupId], name: "value_tabGroupId")
    @@index([value])
    @@index([rotationId])
}

model TextField {
    id        Int      @id @default(autoincrement())
    content   String
    section   Section  @relation("SectionTextFields", fields: [sectionId], references: [id], onDelete: Cascade)
    sectionId Int
    order     Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([sectionId])
}

model OverviewDifficulty {
    id            Int      @id @default(autoincrement())
    singleTarget  Int?
    multiTarget   Int?
    utility       Int?
    survivability Int?
    mobility      Int?
    guide         Guide    @relation(fields: [guideId], references: [id])
    guideId       Int      @unique
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model OverviewGear {
    id              Int      @id @default(autoincrement())
    itemSlot        String?
    itemName        String?
    itemImg         String?
    itemLink        String?
    itemEnchantName String?
    itemEnchantImg  String?
    itemEnchantUrl  String?
    itemSockets     Socket[]
    guide           Guide    @relation(fields: [guideId], references: [id])
    guideId         Int
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@index([guideId])
}

model Socket {
    id             Int          @id @default(autoincrement())
    socketName     String?
    socketImg      String?
    socketUrl      String?
    slotType       SlotType?
    overviewGear   OverviewGear @relation(fields: [overviewGearId], references: [id])
    overviewGearId Int
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@index([overviewGearId])
}

enum UserRole {
    USER
    WRITER
    MODERATOR
    ADMIN
}

enum GuideStatus {
    DRAFT
    PUBLISHED
    ARCHIVED
}

enum SlotType {
    HEAD
    NECK
    SHOULDER
    BACK
    CHEST
    SHIRT
    TABARD
    WRIST
    HAND
    BELT
    LEGS
    FEET
    FINGER
    SECOND_FINGER
    TRINKET
    SECOND_TRINKET
    MAIN_HAND
    OFF_HAND
}

enum CharacterClass {
    WARRIOR
    PALADIN
    HUNTER
    ROGUE
    PRIEST
    SHAMAN
    MAGE
    WARLOCK
    MONK
    DRUID
    DEMON_HUNTER
    DEATH_KNIGHT
    EVOKER
}

enum Specialization {
    BLOOD
    FROST_DK
    UNHOLY
    HAVOC
    VENGEANCE
    BALANCE
    FERAL
    GUARDIAN
    RESTORATION
    DEVASTATION
    PRESERVATION
    BEAST_MASTERY
    MARKSMANSHIP
    SURVIVAL
    ARCANE
    FIRE
    FROST_MAGE
    BREWMASTER
    WINDWALKER
    MISTWEAVER
    HOLY_PRIEST
    DISCIPLINE
    SHADOW
    ASSASSINATION
    OUTLAW
    SUBTLETY
    ELEMENTAL
    ENHANCEMENT
    RESTORATION_SHAMAN
    AFFLICTION
    DEMONOLOGY
    DESTRUCTION
    ARMS
    FURY
    PROTECTION_WARRIOR
    HOLY_PALADIN
    PROTECTION_PALADIN
    RETRIBUTION
}

enum SectionType {
    HERO_TALENTS
    TALENTS
    ROTATION
    DEEP_DIVE
    GEAR
    STAT_PRIORITY
    CONSUMABLES
    MACROS
    WEAK_AURAS
    ADDONS
    DUNGEONS
}
